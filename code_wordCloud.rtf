{\rtf1\ansi\ansicpg1252\cocoartf2513
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;\f1\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;\red27\green31\blue34;\red244\green246\blue249;\red6\green33\blue79;
}
{\*\expandedcolortbl;;\cssrgb\c14118\c16078\c18039;\cssrgb\c96471\c97255\c98039;\cssrgb\c1176\c18431\c38431;
}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\fs27\fsmilli13600 \cf2 \cb3 \expnd0\expndtw0\kerning0
install.packages(c(\cf4 "devtools"\cf2 , \cf4 "rjson"\cf2 , \cf4 "bit64"\cf2 , \cf4 "httr"\cf2 ))\
install.packages(\cf4 "rtweet"\cf2 )\
install.packages(\cf4 "tidytext"\cf2 )\
install.packages(\cf4 "dplyr"\cf2 )\
install.packages(\cf4 "stringr"\cf2 )\
\
library(tidytext)\
library(dplyr)\
library(stringr)\
library(rtweet)\
library(tm)\
library(wordcloud)\
library(RColorBrewer)
\f1\fs24 \cf0 \cb1 \kerning1\expnd0\expndtw0 \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf0 \
mach_tweets = searchTwitter("#quarantine ",since='2020-02-01', n=500, lang="en")\
\
mach_text = sapply(mach_tweets, function(x) x$getText())\
\
#remwords <- c("quarantine")\
#mach_text<-removeWords(mach_text,c(stopwords("english"),"quarantine"))\
\
# create a corpus\
mach_corpus = Corpus(VectorSource(mach_text))\
\
#matching words with the same meaning and leaving just one \
#and removing stopwords in English (1st option)\
#in this case we had to clean the data twice because some punctuation were not included in the second package\
corpus = tm_map(corpus, stemDocument)\
corpus = tm_map(corpus, removePunctuation)\
corpus = tm_map(corpus, removeWords, stopwords('english'))\
\
# create document term matrix applying some transformations\
tdm = TermDocumentMatrix(mach_corpus,\
   control = list(removePunctuation = TRUE,\
   stopwords = c("quarantine","thenecronomi","darlinnnn","got","\'96","--", stopwords('english')),\
   removeNumbers = TRUE, tolower = TRUE))\
\
# define tdm as matrix\
m = as.matrix(tdm)\
# get word counts in decreasing order\
word_freqs = sort(rowSums(m), decreasing=TRUE) \
# create a data frame with words and their frequencies\
dm = data.frame(word=names(word_freqs), freq=word_freqs)\
\
#check the data in a matrix in decreasing order of frequency\
DT::datatable(dm)\
\
# plot wordcloud\
wordcloud(dm$word, dm$freq,max.words=50,min.freq = 7, random.order=FALSE, colors=brewer.pal(7, "OrRd"))\
\
```}